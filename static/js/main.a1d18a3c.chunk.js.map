{"version":3,"sources":["actions.js","api/api.js","constants.js","components/card/Card.js","components/card/CardList.js","components/searchBox/SearchBox.js","components/scroll/Scroll.js","components/errorBoundry/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","x","i","card_Card","key","searchBox","searchChanged","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","SearchBox","scroll_Scroll","errorBoundry_ErrorBoundry","card_CardList","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1d18a3c.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {  \n    return (\n        <div>\n          {\n              robots.map((x,i) => \n                <Card \n                    key={i} \n                    id={x.id} \n                    email={x.email} \n                    name={x.name}/>\n                )\n          }\n         </div>\n        );\n}\n\nexport default CardList;","import React from 'react';\n\nconst searchBox = ({searchChanged}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robofriends' \n            onChange={searchChanged}\n            />\n        </div>\n    )\n}\n\nexport default searchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid white', height:'800px'}}>\n            {props.children}\n        </div> \n        )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true });\n    }\n\n    render(){\n        return this.state.hasError \n        ? (<h1>Opps something went wrong </h1>)\n        : this.props.children \n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/card/CardList';\nimport SearchBox from '../components/searchBox/SearchBox';\nimport Scroll from '../components/scroll/Scroll';\nimport ErrorBoundry from '../components/errorBoundry/ErrorBoundry';\n// import {robots} from '../src/services/robots';\nimport './App.css'\n\nconst mapStateToProps = (state) => {\n    return {\n      searchField: state.searchRobots.searchField,\n      robots: state.requestRobots.robots,\n      isPending: state.requestRobots.isPending\n    }\n  }\n  \n  // dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n  // the function returns an object then uses connect to change the data from redecers.\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n    }\n  }\n\nclass App extends Component { \n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    // Note for custom methods,use arrow function\n    //onSearchChanged = (event) => {\n       // this.setState({searchfield: event.target.value});\n   // }\n\n    render() {\n        const { robots, searchField, onSearchChange, isPending } = this.props;\n        const filteredRobots = robots\n            .filter(x => x.name.toLowerCase().includes(searchField.toLowerCase()))\n        if(isPending){\n            return (<h1>Loading ...</h1>)\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChanged={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div> \n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n        CHANGE_SEARCHFIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n} from './constants';\n  \n  const initialStateSearch = {\n    searchField: ''\n  }\n  \n  export const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n      case CHANGE_SEARCHFIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n      default:\n        return state\n    }\n  }\n  \n  const initialStateRobots = {\n    robots: [],\n    isPending: true\n  }\n  \n  export const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload})\n      default:\n        return state\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport './index.css'; \nimport 'tachyons';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}